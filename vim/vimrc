" $Id: vimrc 261 2010-03-15 15:34:06Z sputnik $

" Turn off compatibility with VI.
set nocompatible

set autoindent
"set background=light
set background=dark
set backup
set backspace=2 "allow backspace to work across inserts and newlines.
set cindent
set noexpandtab
set hlsearch
set incsearch
set laststatus=2
set listchars=tab:\|\-,eol:_
set mouse= "a all modes, n normal mode, v visual mode, '' no mouse
set nolinebreak
set nowrapscan
set number
set shiftwidth=4
set showmatch
set smartindent
set smarttab
set spell spelllang=en_us "spell checking enabled
set splitbelow
set statusline=t%{ShowTab()}\ %l\/%L\ %c%V\ %f%M\ \ %y%=F\i\l\e\:%n\ %a
set tabstop=4
set tagbsearch
set term=xterm
set textwidth=0
set viminfo='10,\"100,:20,%,n~/.viminfo
set wrapmargin=0

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=4

set sidescrolloff=5
set sidescroll=15

"set cmdheight=2

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

set guioptions=
"colorscheme vo_dark

runtime! ftplugin/man.vim

" This is VERY important
syntax on
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

" Forced file types
au BufRead,BufNewFile *.include,*.inc,*.template set filetype=html
au BufRead,BufNewFile *.table,*.procedure,*_create_prelude,*_create_prologue,*_drop_prelude,*_drop_prologue,*.sql,*.trigger,*.view set filetype=sqlanywhere
au BufRead,BufNewFile 0.wiki*,wiki*,vimperator-*wiki* set filetype=twiki
au BufRead Aliases*,*error_log set nospell
au BufRead system_check.txt set paste nospell nonumber et sw=3 ts=3
au BufRead DEFINITIONS* set nospell
autocmd! BufWritePost .vimrc source ~/.vimrc 
autocmd! BufDelete .vimrc source ~/.vimrc 

" Special handling
autocmd Syntax html,vim,xhtml,xml set sw=2
autocmd Syntax html,vim,xhtml,xml set ts=2
autocmd Syntax js set sw=4
autocmd Syntax taglist set nospell
autocmd Syntax perl set tags=./tags,tags,/usr/lib/perl/5.8.8/tags,/usr/local/lib/perl/5.8.8/tags,/usr/local/share/perl/5.8.8/tags makeprg=perl\ -c\ %
autocmd Syntax netrw set nospell
autocmd Syntax dot set makeprg=dot\ -Tpdf\ -O\ %
autocmd Filetype java setlocal omnifunc=javacomplete#Complete completefunc=javacomplete#CompleteParamsInfo


autocmd BufReadPost *
      \ if expand("<afile>:p:h") !=? $TEMP |
      \   if line("'\"") > 0 && line("'\"") <= line("$") |
      \     exe "normal g`\"" |
      \     let b:doopenfold = 1 |
      \   endif |
      \ endif

" Need to postpone using "zv" until after reading the modelines.
autocmd BufWinEnter *
      \ if exists("b:doopenfold") |
      \   unlet b:doopenfold |
      \   exe "normal zv" |
      \ endif 

"""""""""""""""""""""""" MAPS
map <Leader><d> /\(Debug: (.\+) (.\+)[\w\+::.\+\)\@<=\w\+::\w\+()<CR>

" Search visually selected text 
vnoremap * :<C-u>call <SID>VSetSearch()<CR>/<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>?<CR>

" Automatically add closing ( { [ ' " `
inoremap {<cr> {<cr>}<ESC>kA<CR>
inoremap { {}<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i

autocmd Syntax html,vim,xhtml,xml inoremap < <lt>><ESC>i| inoremap > <c-r>=ClosePair('>')<CR>
"inoremap ) <c-r>=ClosePair(')')<CR>
"inoremap ] <c-r>=ClosePair(']')<CR>
"inoremap } <c-r>=CloseBracket()<CR>
"inoremap " <c-r>=QuoteDelim('"')<CR>
"inoremap ' <c-r>=QuoteDelim("'")<CR>

" Enclose visually selected text with ( [ { ' " |
vnoremap _( <ESC>`>a)<ESC>`<i(<ESC>
vnoremap _[ <ESC>`>a]<ESC>`<i[<ESC>
vnoremap _{ <ESC>`>a}<ESC>`<i{<ESC>
vnoremap _" <ESC>`>a"<ESC>`<i"<ESC>
vnoremap _' <ESC>`>a'<ESC>`<i'<ESC>

" Enclose previous word with * " ' ( [ | / {
imap __ __
imap _* <Esc>bi*<Esc>ea*<Space>
imap _) <Esc>bi(<Esc>ea)<Space>
imap _] <Esc>bi[<Esc>ea]<Space>
imap _\| <Esc>bi\|<Esc>ea\|<Space>
imap _/ <Esc>bi/<Esc>ea/<Space>
imap _} <Esc>bi{<Esc>ea}<Space>
imap _' <Esc>bi'<Esc>ea'<Space>
imap _" <Esc>bi"<Esc>ea"<Space>

" Mappings for taglist plugin
map <F3> :Tlist<CR>
map <F4> :TlistHighlightTag<CR>
map <F5> :TlistShowTag<CR>

" Search
noremap ;; :%s:::g<Left><Left><Left>
noremap ;' :%s:::gc<Left><Left><Left><Left>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

func! ShowTab()
  let TabLevel = (indent('.') / &ts )
  if TabLevel == 0
    let TabLevel='*'
  endif
  return TabLevel
endf

func! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endf
map <Leader>f :call ShowFuncName() <CR> 

" vsearch.vim
" Visual mode search
func! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endf

func! ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
  else
    return a:char
  endif
endf

func! QuoteDelim(char)
  let line = getline('.')
  let col = col('.')
  if line[col - 2] == "\\"
    "Inserting a quoted quotation mark into the string
    return a:char
  elseif line[col - 1] == a:char
    "Escaping out of the string
    return "\<Right>"
  else
    "Starting a string
    return a:char.a:char."\<ESC>i"
  endif
endf

"func! Cwd()
"	let cwd = getcwd()
"	return "e " . cwd 
"endf

" perl-support
let g:Perl_AuthorName      = 'Your Name Here'
let g:Perl_AuthorRef       = 'Re'
let g:Perl_Email           = 'example@example.com'
let g:Perl_Company         = 'Company Name'

" gnupg
let g:GPGPreferArmor = 1
let g:GPGPreferSigned = 1
let g:GPGDefaultRecipients = ['recipient_1']
"let g:GPGExecutable  = ''
"let g:GPGUseAgent    = 1
"let g:GPGPreferSymmetric = 1

let g:netrw_http_cmd = "wget -q -O"

" Perl stuff
let perl_include_pod = 1
let perl_extended_vars = 1
let perl_want_scope_in_variables = 1
"let perl_fold = 1
"let perl_fold_blocks = 1

set ffs=unix,dos,mac

" Color settings

" Use 256 colors in terminal
set t_Co=256
colo xoria256

" vim:tw=0:ts=4:sw=4
