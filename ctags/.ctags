-R

--langdef=coffee
--langmap=coffee:.coffee
--langmap=coffee:+.coffee.erb
--regex-coffee=/([A-Za-z]+\.)?([A-Za-z.]+) = .*\.(extend|create)/\2/c,class/
--regex-coffee=/(^|=[ \t])*class ([A-Za-z]+\.)*([A-Za-z]+)( extends [A-Za-z.]+)?$/\3/c,class/
--regex-coffee=/^[ \t]*(module\.)?(exports\.)?@?([A-Za-z.]+):.*[-=]>.*$/\3/m,method/
--regex-coffee=/^[ \t]*(module\.)?(exports\.)?([A-Za-z.]+)[ \t]+=.*[-=]>.*$/\3/f,function/
--regex-coffee=/^[ \t]*([A-Za-z.]+)[ \t]+=[^->\n]*$/\1/v,variable/
--regex-coffee=/^[ \t]*@([A-Za-z.]+)[ \t]+=[^->\n]*$/\1/f,field/
--regex-coffee=/^[ \t]*@([A-Za-z.]+):[^->\n]*$/\1/f,static field/
--regex-coffee=/^[ \t]*([A-Za-z.]+):[^->\n]*$/\1/f,field/
--regex-coffee=/(constructor|initialize: \()@([A-Za-z.]+)/\2/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){0}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){1}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){2}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){3}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){4}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){5}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){6}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){7}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){8}/\3/f,field/
--regex-coffee=/(constructor|initialize: \()@[A-Za-z.]+(, @([A-Za-z.]+)){9}/\3/f,field/

--langmap=ruby:+.rake

--regex-ruby=/(^|;)class[[:space:]]+([A-Z][[:alnum:]]+)::([A-Z][[:alnum:]]+)/\3/c,class,constant/
--regex-ruby=/(^|;)class[[:space:]]+[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::([A-Z][[:alnum:]]+)/\2/c,class,constant/
--regex-ruby=/(^|;)class[[:space:]]+[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::([A-Z][[:alnum:]]+)/\2/c,class,constant/

--regex-ruby=/(^|;)module[[:space:]]+[A-Z][[:alnum:]]+::([A-Z][[:alnum:]]+)/\2/m,module,constant/
--regex-ruby=/(^|;)module[[:space:]]+[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::([A-Z][[:alnum:]]+)/\2/m,module,constant/
--regex-ruby=/(^|;)module[[:space:]]+[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::[A-Z][[:alnum:]]+::([A-Z][[:alnum:]]+)/\2/m,module,constant/

--regex-ruby=/(^|[:;])[ \t]*([A-Z][[:alnum:]_]+) *=/\2/c,class,constant/
--regex-ruby=/(^|;)[ \t]*(has_many|belongs_to|has_one|has_and_belongs_to_many)\(? *:([[:alnum:]_]+)/\3/f,function,association/
--regex-ruby=/(^|;)[ \t]*(named_)?scope\(? *:([[:alnum:]_?!]+)/\3/f,function,named_scope/
--regex-ruby=/(^|;)[ \t]*expose\(? *:([[:alnum:]_]+)/\2/f,function,exposure/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2/f,function,aasm_event/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2!/f,function,aasm_event/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2?/f,function,aasm_event/

--regex-ruby=/(^|;)[ \t]*namespace\(? *[:"]?([[:alnum:]_]+)/\2/f,module,namespace/
--regex-ruby=/(^|;)[ \t]*task\(? *[:"]?([[:alnum:]_]+)/\2/t,task,task/
--regex-ruby=/(^|;)[ \t]*alias_method\(? *[:"]?([[:alnum:]_?!]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*alias_attribute\(? *[:"]?([[:alnum:]_?!]+)/\2/m,method,alias/

--regex-ruby=/(^|;)[ \t]*delegate\(? *[:"]?([[:alnum:]_?!]+[?!]?)/\2/m,method,delegate/
--regex-ruby=/(^|;)[ \t]*delegate\(? *[:"]?[[:alnum:]_?!]+[?!]?"?,[ \t]*[:"]?([[:alnum:]_]+[?!]?)/\2/m,method,delegate/
--regex-ruby=/(^|;)[ \t]*delegate\(? *[:"]?[[:alnum:]_?!]+[?!]?"?,*[:"]?[[:alnum:]_]+[?!]?"?,[ \t]*[:"]?([[:alnum:]_]+[?!]?)/\2/m,method,delegate/

--regex-ruby=/(^|;)[ \t]*value\(? *[:"]?([[:alnum:]_?!]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*counter\(? *[:"]?([[:alnum:]_]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*list\(? *[:"]?([[:alnum:]_]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*set\(? +[:"]?([[:alnum:]_]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*hash_key\(? *[:"]?([[:alnum:]_]+)/\2/m,method,alias/
--regex-ruby=/(^|;)[ \t]*sorted_set\(? *[:"]?([[:alnum:]_]+)/\2/m,method,alias/

--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/
--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/
--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/
--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/
--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/
--regex-ruby=/(^|;)[[:space:]]*attr_(reader|writer|accessor|accessible)[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"][[:alnum:]_]+["]?,[[:space:]]*[:"]([[:alnum:]_]+)["]?/\3/a,attribute,alias/

--langdef=js
--langmap=js:.js
--regex-js=/class[[:space:]]+([A-Z][[:alnum:]]+)[[:space:]]/\1/,class/
--regex-js=/const[[:space:]]+([A-Z][[:alnum:]]+)[[:space:]]/\1/,class/
--regex-js=/const[[:space:]]+([a-z][[:alnum:]]+)[[:space:]]/\1/,const/
--regex-js=/([A-z][[:alnum:]]+)\([[:space:]]/\1/,method/
--regex-js=/([A-z][[:alnum:]]+) = \([[:space:]]/\1/,method/
--regex-js=/function ([A-z][[:alnum:]]+)[[:space:]]/\1/,method/

--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\{/\2/,object/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*function[ \t]*\(/\2/,function/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\[/\2/,array/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[^"]'[^']*/\2/,string/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*(true|false)/\2/,boolean/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[0-9]+/\2/,number/
--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[^=]+([,;]|$)/\2/,variable/

--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*\{/\5/,object/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*function[ \t]*\(/\5/,function/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*\[/\5/,array/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*[^"]'[^']*/\5/,string/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*(true|false)/\5/,boolean/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*[0-9]+/\5/,number/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*.+([,;=]|$)/\5/,variable/
--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*[ \t]*([,;]|$)/\5/,variable/
--regex-js=/function[ \t]+([A-Za-z0-9_$]+)[ \t]*\([^)]*\)/\1/,function/

--exclude=app/assets/javascripts/webpack
--exclude=node_modules
--exclude=public/assets/webpack


--langdef=markdown
--langmap=markdown:.mkd
--regex-markdown=/^#[ \t]+(.*)/\1/h,Heading_L1/
--regex-markdown=/^##[ \t]+(.*)/\1/i,Heading_L2/
--regex-markdown=/^###[ \t]+(.*)/\1/k,Heading_L3/

--langdef=Elixir
--langmap=Elixir:.ex.exs
--regex-Elixir=/^[ \t]*def(p?)[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\2/f,functions,functions (def ...)/
--regex-Elixir=/^[ \t]*defcallback[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\1/c,callbacks,callbacks (defcallback ...)/
--regex-Elixir=/^[ \t]*defdelegate[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\1/d,delegates,delegates (defdelegate ...)/
--regex-Elixir=/^[ \t]*defexception[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/e,exceptions,exceptions (defexception ...)/
--regex-Elixir=/^[ \t]*defimpl[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/i,implementations,implementations (defimpl ...)/
--regex-Elixir=/^[ \t]*defmacro(p?)[ \t]+([a-z_][a-zA-Z0-9_?!]*)\(/\2/a,macros,macros (defmacro ...)/
--regex-Elixir=/^[ \t]*defmacro(p?)[ \t]+([a-zA-Z0-9_?!]+)?[ \t]+([^ \tA-Za-z0-9_]+)[ \t]*[a-zA-Z0-9_!?!]/\3/o,operators,operators (e.g. "defmacro a <<< b")/
--regex-Elixir=/^[ \t]*defmodule[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/m,modules,modules (defmodule ...)/
--regex-Elixir=/^[ \t]*defprotocol[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/p,protocols,protocols (defprotocol...)/
--regex-Elixir=/^[ \t]*Record\.defrecord[ \t]+:([a-zA-Z0-9_]+)/\1/r,records,records (defrecord...)/
--regex-Elixir=/^[ \t]*test[ \t]+\"([a-z_][a-zA-Z0-9_?! ]*)\"*/\1/t,tests,tests (test ...)/
